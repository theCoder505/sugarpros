SugarPros API Documentation
Table of Contents
Website Settings

Authentication APIs

Form Submission APIs

Dashboard & Settings APIs

Account Management APIs

Notification APIs

Appointment APIs

Chat APIs

SugarPros AI Chat

Medical Data APIs

Dexcom Integration

FatSecret Integration

Website Settings
Get Basic Website Settings
URL: /api/basic-website-settings
Method: GET
Description: Get all basic information about the website
Response:

json
{
    "data": {
        "id": 1,
        "brandname": "SugarPros",
        "brandlogo": "path/to/logo.png",
        "brandicon": "path/to/icon.ico",
        "currency": "USD",
        "contact_email": "contact@example.com",
        "contact_phone": "+1234567890",
        "streets": ["Street1", "Street2"],
        "cities": ["City1", "City2"],
        "states": ["State1", "State2"],
        "zip_codes": ["12345", "67890"],
        "prefixcode": "PA",
        "languages": ["English", "Spanish"],
        "meeting_web_root_url": "https://meet.example.com",
        "fb_url": "https://facebook.com/example",
        "twitter_url": "https://twitter.com/example",
        "instagram_url": "https://instagram.com/example",
        "linkedin_url": "https://linkedin.com/example",
        "created_at": "2023-01-01T00:00:00.000000Z",
        "updated_at": "2023-01-01T00:00:00.000000Z"
    }
}


All Patients: /api/patients
All Providers: /api/providers




Authentication APIs
User Registration Process
1. Send OTP
URL: /api/send-otp-to-user
Method: POST
Body:

username: Desired username (required)

email: User email (required)

prefix_code: Phone prefix code (required)

mobile: Phone number (required)

Success Response:

json
{
    "type": "success",
    "message": "OTP sent to your email!"
}
2. Verify OTP
URL: /api/verify-otp
Method: POST
Body:

username: Same as registration (required)

email: Same as registration (required)

otp: 6-digit OTP received (required)

Success Response:

json
{
    "type": "success",
    "message": "OTP Verified!"
}
3. Final Signup
URL: /api/signup-new-user
Method: POST
Body:

username: Same as registration (required)

email: Same as registration (required)

prefix_code: Phone prefix code (required)

mobile: Phone number (required)

password: Account password (required)

Success Response:

json
{
    "type": "success",
    "user": {
        "id": 2,
        "patient_id": "PA25060001",
        "name": "username",
        "email": "user@example.com",
        "prefix_code": "+1",
        "mobile": "1234567890"
    },
    "message": "Login Success!"
}
User Login
URL: /api/login-existing-user
Method: POST
Body:

email: Registered email (required)

password: Account password (required)

Success Response:

json
{
    "type": "success",
    "user": {
        "id": 2,
        "patient_id": "PA25060001",
        "name": "username",
        "email": "user@example.com"
    },
    "message": "Login Success!"
}
Logout
URL: /api/logout
Method: GET
Headers: Authorization: Bearer [JWT_TOKEN]
Success Response:

json
{
    "type": "success",
    "message": "Logged Out Successfully!"
}
Password Recovery
1. Send Reset Request
URL: /api/send-forget-request
Method: POST
Body:

email: Registered email (required)

Success Response:

json
{
    "type": "success",
    "message": "A 6 Digit OTP Sent To Your Email!"
}
2. Verify OTP
URL: /api/otp-verification-on-reset
Method: POST
Body:

email: Registered email (required)

otp: 6-digit OTP received (required)

Success Response:

json
{
    "type": "success",
    "message": "OTP matched! Set new password now."
}
3. Check Password Validity
URL: /api/check-password-validity
Method: POST
Body:

email: Registered email (required)

otp: Verified OTP (required)

password: New password (required)

confirm_password: Confirm new password (required)

Success Response:

json
{
    "type": "success",
    "message": "verified"
}
4. Reset Password
URL: /api/reset-account-password
Method: POST
Body: Same as password validity check
Success Response:

json
{
    "type": "success",
    "message": "Account Retrieved Successfully! Login Now."
}
Form Submission APIs
Basic Details
Get Form Data
URL: /api/basic
Method: GET
Headers: Authorization: Bearer [JWT_TOKEN]
Response:

json
{
    "type": "success",
    "data": {
        "fname": "John",
        "mname": "",
        "lname": "Doe",
        "dob": "1990-01-01",
        "gender": "male",
        "email": "john@example.com",
        "phone": "+1234567890",
        "street": "123 Main St",
        "city": "New York",
        "state": "NY",
        "zip_code": "10001",
        "medicare_number": "123456789",
        "group_number": "GRP123",
        "license": "path/to/license.jpg",
        "ssn": "123-45-6789",
        "notification_type": "email",
        "web_streets": ["Main St", "Broadway"],
        "web_cities": ["New York", "Los Angeles"],
        "web_states": ["NY", "CA"],
        "web_zip_codes": ["10001", "90001"]
    }
}
Submit Form
URL: /api/basic
Method: POST
Headers: Authorization: Bearer [JWT_TOKEN]
Body (form-data):

All fields from GET response

license: Image file (optional)

Success Response:

json
{
    "type": "success",
    "message": "Your details have been added successfully!"
}
Privacy Form
Get Form Data
URL: /api/privacy
Method: GET
Headers: Authorization: Bearer [JWT_TOKEN]
Response:

json
{
    "type": "success",
    "data": [{
        "fname": "John",
        "lname": "Doe",
        "date": "2023-01-01",
        "users_message": "Sample message",
        "notice_of_privacy_practice": "true",
        "patients_name": "John Doe",
        "representatives_name": "Jane Doe",
        "service_taken_date": "2023-01-01",
        "relation_with_patient": "spouse"
    }]
}
Submit Form
URL: /api/privacy
Method: POST
Headers: Authorization: Bearer [JWT_TOKEN]
Body (form-data):

All fields from GET response

Success Response:

json
{
    "type": "success",
    "message": "Data taken, now fillup this page"
}
Compliance Form
Get Form Data
URL: /api/compliance
Method: GET
Headers: Authorization: Bearer [JWT_TOKEN]
Response:

json
{
    "type": "success",
    "data": [{
        "patients_name": "John Doe",
        "dob": "1990-01-01",
        "patients_signature": "path/to/signature.jpg",
        "patients_dob": "1990-01-01",
        "representative_signature": "path/to/rep_signature.jpg",
        "representative_dob": "1985-01-01",
        "nature_with_patient": "spouse"
    }]
}
Submit Form
URL: /api/compliance
Method: POST
Headers: Authorization: Bearer [JWT_TOKEN]
Body (form-data):

All fields from GET response

patients_signature: Image file (optional)

representative_signature: Image file (optional)

Success Response:

json
{
    "type": "success",
    "message": "Updated, now fillup this page"
}
Financial Agreement Form
Get Form Data
URL: /api/financial-responsibility-aggreement
Method: GET
Headers: Authorization: Bearer [JWT_TOKEN]
Response:

json
{
    "type": "success",
    "data": [{
        "user_name": "John Doe",
        "patients_name": "John Doe",
        "patients_signature_date": "2023-01-01",
        "relationship": "self"
    }]
}
Submit Form
URL: /api/financial-responsibility-aggreement
Method: POST
Headers: Authorization: Bearer [JWT_TOKEN]
Body (form-data):

All fields from GET response

Success Response:

json
{
    "type": "success",
    "message": "Updated, now fillup this page"
}
Self Payment Agreement
Get Form Data
URL: /api/agreement-for-self-payment
Method: GET
Headers: Authorization: Bearer [JWT_TOKEN]
Response:

json
{
    "type": "success",
    "data": [{
        "user_name": "John Doe",
        "patients_name": "John Doe",
        "patients_signature_date": "2023-01-01"
    }]
}
Submit Form
URL: /api/agreement-for-self-payment
Method: POST
Headers: Authorization: Bearer [JWT_TOKEN]
Body (form-data):

All fields from GET response

Success Response:

json
{
    "type": "success",
    "message": "Successfully Completed"
}
Dashboard & Settings APIs
Patient Dashboard
URL: /api/dashboard
Method: GET
Headers: Authorization: Bearer [JWT_TOKEN]
Response:

json
{
    "type": "success",
    "userID": 2,
    "patient_id": "PA25060001",
    "userType": "patient",
    "pod_name": "A",
    "total_unread": 3,
    "userLang": "English",
    "Consent": true,
    "notificationMethod": "email",
    "languages": ["English", "Spanish"],
    "appointments": [{
        "id": 1,
        "appointment_uid": "SA2307-0001",
        "provider_id": "PR123",
        "provider_name": "Dr. Smith",
        "date": "2023-07-15",
        "time": "10:00:00",
        "status": "confirmed",
        "meeting_url": "https://meet.example.com/room/SA2307-0001"
    }],
    "chat_history": [{
        "id": 1,
        "sent_by": "PA25060001",
        "received_by": "PR123",
        "main_message": "Hello Doctor",
        "message_type": "text",
        "status": "seen",
        "created_at": "2023-07-10 14:30:00",
        "sender_name": "John Doe",
        "sender_image": "path/to/profile.jpg"
    }],
    "related_providers": [{
        "provider_id": "PR123",
        "name": "Dr. Smith",
        "profile_picture": "path/to/doctor.jpg",
        "latest_message": "Hello",
        "message_time": "2023-07-10 14:30:00",
        "message_type": "text",
        "is_sender": false,
        "message_status": "seen",
        "unread_count": 0
    }]
}
HIPAA Consent
URL: /api/hippa-consent-prefference
Method: POST
Headers: Authorization: Bearer [JWT_TOKEN]
Body (form-data):

consent: 0 or 1 (required)

Success Response:

json
{
    "type": "success",
    "message": "HIPAA Consent Selection Successfully Implemented!"
}
Language Preference
URL: /api/change-language-prefference
Method: POST
Headers: Authorization: Bearer [JWT_TOKEN]
Body (form-data):

language: Selected language (required)

Success Response:

json
{
    "type": "success",
    "message": "Language Selection Successfully Implemented!"
}
Account Management APIs
Get Account Details
URL: /api/account
Method: GET
Headers: Authorization: Bearer [JWT_TOKEN]
Response:

json
{
    "type": "success",
    "accountDetails": [{
        "fname": "John",
        "mname": "",
        "lname": "Doe",
        "dob": "1990-01-01",
        "gender": "male",
        "email": "john@example.com",
        "phone": "+1234567890",
        "emmergency_name": "Jane Doe",
        "emmergency_relationship": "spouse",
        "emmergency_phone": "+1987654321",
        "street": "123 Main St",
        "city": "New York",
        "state": "NY",
        "zip_code": "10001",
        "insurance_provider": "Medicare",
        "insurance_plan_number": "PLN123",
        "insurance_group_number": "GRP123",
        "license": "path/to/license.jpg",
        "ssn": "123-45-6789",
        "notification_type": "email"
    }],
    "profile_picture": "path/to/profile.jpg",
    "streets": ["Main St", "Broadway"],
    "cities": ["New York", "Los Angeles"],
    "states": ["NY", "CA"],
    "zip_codes": ["10001", "90001"],
    "prefixcode": "PA",
    "languages": ["English", "Spanish"]
}
Update Profile Picture
URL: /api/update-profile-picture
Method: POST
Headers: Authorization: Bearer [JWT_TOKEN]
Body (form-data):

profilepicture: Image file (required)

Success Response:

json
{
    "type": "success",
    "message": "Profile picture updated successfully!",
    "new_profile_picture": "path/to/new/image.jpg"
}
Update Account Details
URL: /api/update-account-details
Method: POST
Headers: Authorization: Bearer [JWT_TOKEN]
Body (form-data):

All account detail fields

license: Image file (optional)

Success Response:

json
{
    "type": "success",
    "message": "Account details updated successfully!",
    "updated_fields": {
        "fname": "John",
        "lname": "Doe"
    }
}
Delete Account
URL: /api/delete-account
Method: GET
Headers: Authorization: Bearer [JWT_TOKEN]
Success Response:

json
{
    "type": "success",
    "message": "Account deleted successfully!"
}
Get Settings
URL: /api/settings
Method: GET
Headers: Authorization: Bearer [JWT_TOKEN]
Response:

json
{
    "type": "success",
    "accountDetails": [{
        "fname": "John",
        "lname": "Doe",
        "email": "john@example.com"
    }],
    "profile_picture": "path/to/profile.jpg"
}
Email Change Process
1. Check Email Exists
URL: /api/user-accout-email-verification
Method: POST
Headers: Authorization: Bearer [JWT_TOKEN]
Body (form-data):

email: Current email (required)

Success Response:

json
{
    "type": "success",
    "message": "Email verified! OTP sent to your email.",
    "otp": "123456"
}
2. Verify OTP for Email Change
URL: /api/user-accout-otp-verification
Method: POST
Headers: Authorization: Bearer [JWT_TOKEN]
Body (form-data):

email: Current email (required)

otp: 6-digit OTP received (required)

Success Response:

json
{
    "type": "success",
    "message": "OTP verified!"
}
3. Final Email Change
URL: /api/user-accout-email-change
Method: POST
Headers: Authorization: Bearer [JWT_TOKEN]
Body (form-data):

email: Current email (required)

new_email: New email (required)

current_password: Account password (required)

Success Response:

json
{
    "type": "success",
    "message": "Your Account Email Updated Successfully!"
}
Password Change Process
1. Check Email for Password Change
URL: /api/user-account-password-verification
Method: POST
Headers: Authorization: Bearer [JWT_TOKEN]
Body (form-data):

email: Current email (required)

Success Response:

json
{
    "type": "success",
    "message": "Email verified! OTP sent to your email.",
    "otp": "123456"
}
2. Verify OTP for Password Change
URL: /api/user-account-password-otp-verification
Method: POST
Headers: Authorization: Bearer [JWT_TOKEN]
Body (form-data):

email: Current email (required)

otp: 6-digit OTP received (required)

Success Response:

json
{
    "type": "success",
    "message": "OTP verified!"
}
3. Final Password Change
URL: /api/user-account-password-change
Method: POST
Headers: Authorization: Bearer [JWT_TOKEN]
Body (form-data):

email: Current email (required)

current_password: Current password (required)

new_password: New password (required)

Success Response:

json
{
    "type": "success",
    "message": "Your password has been updated successfully!"
}
Notification APIs
Get Notifications
URL: /api/notifications
Method: GET
Headers: Authorization: Bearer [JWT_TOKEN]
Response:

json
{
    "type": "success",
    "notifications": [{
        "id": 1,
        "user_id": "PA25060001",
        "notification": "Profile picture updated",
        "created_at": "2023-07-10 14:30:00",
        "read_status": 1
    }],
    "profile_picture": "path/to/image.jpg"
}
Delete Notification
URL: /api/notifications
Method: DELETE
Headers: Authorization: Bearer [JWT_TOKEN]
Body (form-data):

notification_id: Notification ID to delete (required)

Success Response:

json
{
    "type": "success",
    "message": "Notification deleted successfully!"
}
Appointment APIs
Get Appointments
URL: /api/appointments
Method: GET
Headers: Authorization: Bearer [JWT_TOKEN]
Response:

json
{
    "type": "success",
    "appointments": [{
        "id": 1,
        "appointment_uid": "SA2307-0001",
        "provider_id": "PR123",
        "provider_name": "Dr. Smith",
        "date": "2023-07-15",
        "time": "10:00:00",
        "status": "confirmed",
        "meeting_url": "https://meet.example.com/room/SA2307-0001"
    }]
}
Get Specific Appointment
URL: /api/appointments
Method: POST
Headers: Authorization: Bearer [JWT_TOKEN]
Body (form-data):

appointment_uid: Appointment UID (required)

Response:

json
{
    "type": "success",
    "data": {
        "appointmentData": [{
            "id": 1,
            "appointment_uid": "SA2307-0001",
            "provider_id": "PR123",
            "provider_name": "Dr. Smith",
            "date": "2023-07-15",
            "time": "10:00:00",
            "status": "confirmed",
            "meeting_url": "https://meet.example.com/room/SA2307-0001"
        }],
        "virtual_notes": [],
        "clinical_notes": [],
        "questlab_notes": [],
        "eprescription_notes": []
    }
}
Join Meeting
URL: /api/join-meeting/{appointment_uid}
Method: GET
Headers: Authorization: Bearer [JWT_TOKEN]
Response:

json
{
    "type": "success",
    "meeting_url": "https://meet.example.com/room/SA2307-0001"
}
Search Appointments by Month
URL: /api/search-appointments-by-month
Method: POST
Headers: Authorization: Bearer [JWT_TOKEN]
Body (form-data):

searchingMonth: Month number (1-12) (required)

Response:

json
{
    "type": "success",
    "data": [{
        "id": 1,
        "appointment_uid": "SA2307-0001",
        "date": "2023-07-15",
        "time": "10:00:00",
        "status": "confirmed"
    }]
}
Fetch Specific Range Appointment Data
URL: /api/fetch-specific-range-data
Method: POST
Headers: Authorization: Bearer [JWT_TOKEN]
Body (form-data):

start_date: Start date (YYYY-MM-DD) (required)

end_date: End date (YYYY-MM-DD) (required)

Response:

json
{
    "type": "success",
    "data": [{
        "id": 1,
        "appointment_uid": "SA2307-0001",
        "date": "2023-07-15",
        "time": "10:00:00",
        "status": "confirmed"
    }]
}
Appointment Booking Process
1. Get Patient Details
URL: /api/appointments/patient-details
Method: GET
Headers: Authorization: Bearer [JWT_TOKEN]
Response:

json
{
    "type": "success",
    "data": {
        "patient_id": "PA25060001",
        "fname": "John",
        "lname": "Doe",
        "email": "john@example.com"
    }
}
2. Initiate Booking
URL: /api/appointments/initiate
Method: POST
Headers: Authorization: Bearer [JWT_TOKEN]
Body (form-data):

date: Appointment date (YYYY-MM-DD) (required)

time: Appointment time (HH:MM) (required)

Response:

json
{
    "type": "success",
    "data": {
        "stripe_key": "pk_test_1234567890",
        "amount": 100,
        "currency": "USD",
        "booking_details": {
            "date": "2023-07-15",
            "time": "10:00"
        }
    }
}
3. Complete Booking
URL: /api/appointments/complete
Method: POST
Headers: Authorization: Bearer [JWT_TOKEN]
Body (form-data):

stripe_token: Stripe payment token (required)

date: Appointment date (YYYY-MM-DD) (required)

time: Appointment time (HH:MM) (required)

full_name: Patient full name (required)

address: Patient address (required)

email: Patient email (required)

phone: Patient phone (required)

country_code: Country code (required)

Response:

json
{
    "type": "success",
    "data": {
        "appointment_id": 1,
        "appointment_uid": "SA2307-0001",
        "date": "2023-07-15",
        "time": "10:00",
        "payment_details": {
            "amount": 100,
            "currency": "USD",
            "charge_id": "ch_1234567890"
        }
    }
}
Payment Success Callback
URL: /api/appointments/payment/success
Method: GET
Response:

json
{
    "type": "success",
    "message": "Payment completed successfully"
}
Payment Cancel Callback
URL: /api/appointments/payment/cancel
Method: GET
Response:

json
{
    "type": "error",
    "message": "Payment was cancelled"
}
Chat APIs
Get Chat History
URL: /api/chat-history
Method: GET
Headers: Authorization: Bearer [JWT_TOKEN]
Response:

json
{
    "type": "success",
    "chat_history": [{
        "id": 1,
        "sent_by": "PA25060001",
        "sender_type": "patient",
        "received_by": "PR123",
        "receiver_type": "provider",
        "main_message": "Hello Doctor",
        "message_type": "text",
        "status": "seen",
        "created_at": "2023-07-10 14:30:00",
        "sender_name": "John Doe",
        "sender_image": "path/to/profile.jpg",
        "receiver_name": "Dr. Smith",
        "receiver_image": "path/to/doctor.jpg",
        "is_me": true
    }],
    "pod_name": "A",
    "total_unread": 3
}
Fetch Related Chats
URL: /api/fetch-related-chats
Method: POST
Headers: Authorization: Bearer [JWT_TOKEN]
Body (form-data):

message_with: Provider ID to chat with (required)

Response:

json
{
    "type": "success",
    "data": [{
        "id": 1,
        "sent_by": "PA25060001",
        "received_by": "PR123",
        "main_message": "Hello Doctor",
        "message_type": "text",
        "status": "seen",
        "created_at": "2023-07-10 14:30:00"
    }]
}
Add New Message
URL: /api/add-new-message
Method: POST
Headers: Authorization: Bearer [JWT_TOKEN]
Body (form-data):

send_text_to: Provider ID to send message to (required)

message: Message content (required)

Success Response:

json
{
    "type": "success",
    "message": "Message sent successfully"
}
Send Image Message
URL: /api/send-image-message
Method: POST
Headers: Authorization: Bearer [JWT_TOKEN]
Body (form-data):

send_text_to: Provider ID to send message to (required)

image: Image file (required)

Success Response:

json
{
    "type": "success",
    "message": "Image sent successfully",
    "image_url": "/message_imgs/img_123456.jpg"
}
Update Seen Status
URL: /api/update-message-seen
Method: POST
Headers: Authorization: Bearer [JWT_TOKEN]
Body (form-data):

receiverId: Current user ID (required)

senderId: Provider ID (required)

Success Response:

json
{
    "type": "success",
    "message": "Status updated successfully"
}
SugarPros AI Chat
Get Chat Sessions
URL: /api/sugarpro-ai
Method: GET
Headers: Authorization: Bearer [JWT_TOKEN]
Query Parameters:

chatuid: Optional chat session ID

Response:

json
{
    "type": "success",
    "data": {
        "chatSessions": [{
            "chatuid": "Chat_1234567890",
            "first_message": {
                "id": 1,
                "message": "Hello AI",
                "created_at": "2023-07-10 14:30:00"
            }
        }],
        "chats": [{
            "id": 1,
            "requested_by": 2,
            "requested_to": "AI",
            "chatuid": "Chat_1234567890",
            "message_of_uid": "PA25060001",
            "message": "Hello AI",
            "created_at": "2023-07-10 14:30:00"
        }],
        "allChats": [{
            "id": 1,
            "chatuid": "Chat_1234567890",
            "message": "Hello AI",
            "created_at": "2023-07-10 14:30:00"
        }],
        "currentChatUid": "Chat_1234567890"
    }
}
Get AI Response
URL: /api/chatgpt-response
Method: POST
Headers: Authorization: Bearer [JWT_TOKEN]
Body (form-data):

message: User message (required)

chatuid: Chat session ID (required)

Response:

json
{
    "type": "success",
    "message": "Hello! How can I help you today?"
}
Clear Chat Session
URL: /api/clear-chat-session
Method: POST
Headers: Authorization: Bearer [JWT_TOKEN]
Response:

json
{
    "type": "success",
    "data": {
        "newChatUid": "Chat_9876543210"
    }
}
Medical Data APIs
Clinical Notes
URL: /api/clinical-notes
Method: GET
Headers: Authorization: Bearer [JWT_TOKEN]
Response:

json
{
    "type": "success",
    "clinical_notes": [{
        "id": 1,
        "appointment_uid": "SA2307-0001",
        "provider_id": "PR123",
        "note_type": "diagnosis",
        "note_content": "Patient shows signs of improvement",
        "created_at": "2023-07-10 14:30:00"
    }]
}
Quest Lab Results
URL: /api/quest-lab
Method: GET
Headers: Authorization: Bearer [JWT_TOKEN]
Response:

json
{
    "type": "success",
    "quest_lab": [{
        "id": 1,
        "appointment_uid": "SA2307-0001",
        "provider_id": "PR123",
        "test_name": "Blood Glucose",
        "test_result": "120 mg/dL",
        "reference_range": "70-140 mg/dL",
        "created_at": "2023-07-10 14:30:00"
    }]
}
E-Prescriptions
URL: /api/e-prescriptions
Method: GET
Headers: Authorization: Bearer [JWT_TOKEN]
Response:

json
{
    "type": "success",
    "e_prescription": [{
        "id": 1,
        "appointment_uid": "SA2307-0001",
        "provider_id": "PR123",
        "medication_name": "Metformin",
        "dosage": "500mg",
        "frequency": "Twice daily",
        "created_at": "2023-07-10 14:30:00"
    }]
}
Dexcom Integration
Dexcom Dashboard
URL: /api/dexcom
Method: GET
Headers: Authorization: Bearer [JWT_TOKEN]
Response:

json
{
    "type": "success",
    "data": {
        "chart_data": {
            "labels": ["08:00", "09:00", "10:00"],
            "values": [120, 135, 110],
            "trends": ["steady", "rising", "falling"]
        },
        "latest_reading": {
            "time": "10:00",
            "value": 110,
            "trend": "falling",
            "trend_rate": -0.5,
            "timestamp": "2023-07-10T10:00:00Z"
        },
        "history": [{
            "time": "08:00",
            "value": 120,
            "trend": "steady",
            "trend_rate": 0,
            "timestamp": "2023-07-10T08:00:00Z"
        }],
        "device_info": {
            "last_sync": "July 10, 2023",
            "sync_time": "10:30 AM",
            "sensor_id": "DEX12345",
            "battery": "Full",
            "start_date": "July 5, 2023",
            "end_date": "July 15, 2023",
            "device_model": "Dexcom G6"
        }
    }
}
Connect to Dexcom
URL: /api/connect-dexcom
Method: GET
Headers: Authorization: Bearer [JWT_TOKEN]
Response:

json
{
    "type": "success",
    "data": {
        "auth_url": "https://api.dexcom.com/v2/oauth2/login?client_id=12345&redirect_uri=https://example.com/callback"
    }
}
Dexcom Callback
URL: /api/dexcom-callback
Method: GET
Query Parameters:

code: Authorization code from Dexcom

state: CSRF token

Success Response:

json
{
    "type": "success",
    "message": "Dexcom account connected successfully!",
    "data": {
        "access_token": "dexcom_access_token_123",
        "expires_in": 3600,
        "refresh_token": "dexcom_refresh_token_456"
    }
}
FatSecret Integration
FatSecret Dashboard
URL: /api/nutrition-tracker
Method: GET
Headers: Authorization: Bearer [JWT_TOKEN]
Response:

json
{
    "type": "success",
    "data": {
        "foods": [{
            "id": "12345",
            "name": "Chicken Soup",
            "brand": "Homemade",
            "calories": 120,
            "protein": 10,
            "carbs": 8,
            "fat": 5,
            "serving_description": "1 cup"
        }]
    }
}
Search Foods
URL: /api/nutrition-tracker/search
Method: GET
Headers: Authorization: Bearer [JWT_TOKEN]
Query Parameters:

search: Search term (default: "chicken soup")

Response:

json
{
    "type": "success",
    "data": {
        "foods": [{
            "id": "12345",
            "name": "Chicken Soup",
            "brand": "Homemade",
            "calories": 120,
            "protein": 10,
            "carbs": 8,
            "fat": 5,
            "serving_description": "1 cup"
        }],
        "search_term": "chicken soup",
        "count": 1
    }
}
Get Food Details
URL: /api/nutrition-tracker/food/{foodId}
Method: GET
Headers: Authorization: Bearer [JWT_TOKEN]
Response:

json
{
    "type": "success",
    "data": {
        "food": {
            "id": "12345",
            "name": "Chicken Soup",
            "brand": "Homemade",
            "calories": 120,
            "protein": 10,
            "carbs": 8,
            "fat": 5,
            "fiber": 2,
            "sugar": 3,
            "sodium": 800,
            "serving_description": "1 cup",
            "food_url": "https://platform.fatsecret.com/food/12345",
            "health_score": 75,
            "servings": [{
                "serving_id": "1",
                "serving_description": "1 cup",
                "calories": 120,
                "protein": 10,
                "carbs": 8,
                "fat": 5
            }]
        }
    }
}
Get Breakfast Foods
URL: /api/nutrition-tracker/breakfast
Method: GET
Headers: Authorization: Bearer [JWT_TOKEN]
Response: Same as search foods with breakfast-related items

Get Lunch Foods
URL: /api/nutrition-tracker/lunch
Method: GET
Headers: Authorization: Bearer [JWT_TOKEN]
Response: Same as search foods with lunch-related items

Get Dinner Foods
URL: /api/nutrition-tracker/dinner
Method: GET
Headers: Authorization: Bearer [JWT_TOKEN]
Response: Same as search foods with dinner-related items













---------------------------------- For Providers Now ----------------------------------------



"access_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vMTI3LjAuMC4xOjgwMDAvYXBpL2xvZ2luLWV4aXN0aW5nLXVzZXIiLCJpYXQiOjE3NTIyMzAxMzUsImV4cCI6MTc1MjIzMzczNSwibmJmIjoxNzUyMjMwMTM1LCJqdGkiOiJibFV0b0dwdUhURnZiWEZHIiwic3ViIjoiNCIsInBydiI6IjIzYmQ1Yzg5NDlmNjAwYWRiMzllNzAxYzQwMDg3MmRiN2E1OTc2ZjciLCJ1c2VyX3R5cGUiOiJwYXRpZW50IiwicGF0aWVudF9pZCI6IlBBMjUwNzAwMDIifQ.MqRgS1bSDOcYqQ0_-wnnPwoPt_ptK6C7rkzOTphRzWk",
"token_type": "bearer",


